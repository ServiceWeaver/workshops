// go:build !ignoreWeaverGen

package main

// Code generated by "weaver generate". DO NOT EDIT.
import (
	"context"
	"errors"
	"github.com/ServiceWeaver/weaver"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
	"time"
)
var _ codegen.LatestVersion = codegen.Version[[0][11]struct{}]("You used 'weaver generate' codegen version 0.11.0, but you built your code with an incompatible weaver module version. Try upgrading 'weaver generate' and re-running it.")

func init() {
	codegen.Register(codegen.Registration{
		Name:        "github.com/ServiceWeaver/workshops/Cache",
		Iface:       reflect.TypeOf((*Cache)(nil)).Elem(),
		Impl:        reflect.TypeOf(cache{}),
		Routed:      true,
		LocalStubFn: func(impl any, tracer trace.Tracer) any { return cache_local_stub{impl: impl.(Cache), tracer: tracer} },
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return cache_client_stub{stub: stub, getMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/ServiceWeaver/workshops/Cache", Method: "Get"}), putMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/ServiceWeaver/workshops/Cache", Method: "Put"})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return cache_server_stub{impl: impl.(Cache), addLoad: addLoad}
		},
		RefData: "",
	})
	codegen.Register(codegen.Registration{
		Name:  "github.com/ServiceWeaver/workshops/ChatGPT",
		Iface: reflect.TypeOf((*ChatGPT)(nil)).Elem(),
		Impl:  reflect.TypeOf(chatgpt{}),
		LocalStubFn: func(impl any, tracer trace.Tracer) any {
			return chatGPT_local_stub{impl: impl.(ChatGPT), tracer: tracer}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return chatGPT_client_stub{stub: stub, completeMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/ServiceWeaver/workshops/ChatGPT", Method: "Complete"})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return chatGPT_server_stub{impl: impl.(ChatGPT), addLoad: addLoad}
		},
		RefData: "",
	})
	codegen.Register(codegen.Registration{
		Name:  "github.com/ServiceWeaver/workshops/Factorer",
		Iface: reflect.TypeOf((*Factorer)(nil)).Elem(),
		Impl:  reflect.TypeOf(factorer{}),
		LocalStubFn: func(impl any, tracer trace.Tracer) any {
			return factorer_local_stub{impl: impl.(Factorer), tracer: tracer}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return factorer_client_stub{stub: stub, factorMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/ServiceWeaver/workshops/Factorer", Method: "Factor"})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return factorer_server_stub{impl: impl.(Factorer), addLoad: addLoad}
		},
		RefData: "⟦395d1bc7:wEaVeReDgE:github.com/ServiceWeaver/workshops/Factorer→github.com/ServiceWeaver/workshops/Cache⟧\n",
	})
	codegen.Register(codegen.Registration{
		Name:  "github.com/ServiceWeaver/weaver/Main",
		Iface: reflect.TypeOf((*weaver.Main)(nil)).Elem(),
		Impl:  reflect.TypeOf(app{}),
		LocalStubFn: func(impl any, tracer trace.Tracer) any {
			return main_local_stub{impl: impl.(weaver.Main), tracer: tracer}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any { return main_client_stub{stub: stub} },
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return main_server_stub{impl: impl.(weaver.Main), addLoad: addLoad}
		},
		RefData: "⟦18b8c61c:wEaVeReDgE:github.com/ServiceWeaver/weaver/Main→github.com/ServiceWeaver/workshops/Factorer⟧\n⟦b2b169fd:wEaVeReDgE:github.com/ServiceWeaver/weaver/Main→github.com/ServiceWeaver/workshops/ChatGPT⟧\n",
	})
}

// weaver.Instance checks.
var _ weaver.InstanceOf[Cache] = (*cache)(nil)
var _ weaver.InstanceOf[ChatGPT] = (*chatgpt)(nil)
var _ weaver.InstanceOf[Factorer] = (*factorer)(nil)
var _ weaver.InstanceOf[weaver.Main] = (*app)(nil)

// weaver.Router checks.
var _ weaver.RoutedBy[router] = (*cache)(nil)
var _ weaver.Unrouted = (*chatgpt)(nil)
var _ weaver.Unrouted = (*factorer)(nil)
var _ weaver.Unrouted = (*app)(nil)

// Component "cache", router "router" checks.
var _ func(_ context.Context, x int) int = (&router{}).Get                // routed
var _ func(_ context.Context, x int, factors []int) int = (&router{}).Put // routed

// Local stub implementations.

type cache_local_stub struct {
	impl   Cache
	tracer trace.Tracer
}

// Check that cache_local_stub implements the Cache interface.
var _ Cache = (*cache_local_stub)(nil)

func (s cache_local_stub) Get(ctx context.Context, a0 int) (r0 []int, err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "main.Cache.Get", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Get(ctx, a0)
}

func (s cache_local_stub) Put(ctx context.Context, a0 int, a1 []int) (err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "main.Cache.Put", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Put(ctx, a0, a1)
}

type chatGPT_local_stub struct {
	impl   ChatGPT
	tracer trace.Tracer
}

// Check that chatGPT_local_stub implements the ChatGPT interface.
var _ ChatGPT = (*chatGPT_local_stub)(nil)

func (s chatGPT_local_stub) Complete(ctx context.Context, a0 string) (r0 string, err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "main.ChatGPT.Complete", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Complete(ctx, a0)
}

type factorer_local_stub struct {
	impl   Factorer
	tracer trace.Tracer
}

// Check that factorer_local_stub implements the Factorer interface.
var _ Factorer = (*factorer_local_stub)(nil)

func (s factorer_local_stub) Factor(ctx context.Context, a0 int) (r0 []int, err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "main.Factorer.Factor", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Factor(ctx, a0)
}

type main_local_stub struct {
	impl   weaver.Main
	tracer trace.Tracer
}

// Check that main_local_stub implements the weaver.Main interface.
var _ weaver.Main = (*main_local_stub)(nil)

// Client stub implementations.

type cache_client_stub struct {
	stub       codegen.Stub
	getMetrics *codegen.MethodMetrics
	putMetrics *codegen.MethodMetrics
}

// Check that cache_client_stub implements the Cache interface.
var _ Cache = (*cache_client_stub)(nil)

func (s cache_client_stub) Get(ctx context.Context, a0 int) (r0 []int, err error) {
	// Update metrics.
	start := time.Now()
	s.getMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "main.Cache.Get", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.getMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.getMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int(a0)

	// Set the shardKey.
	var r router
	shardKey := _hashCache(r.Get(ctx, a0))

	// Call the remote method.
	s.getMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}
	s.getMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_int_7c8c8866(dec)
	err = dec.Error()
	return
}

func (s cache_client_stub) Put(ctx context.Context, a0 int, a1 []int) (err error) {
	// Update metrics.
	start := time.Now()
	s.putMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "main.Cache.Put", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.putMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.putMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	size += (4 + (len(a1) * 8))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int(a0)
	serviceweaver_enc_slice_int_7c8c8866(enc, a1)

	// Set the shardKey.
	var r router
	shardKey := _hashCache(r.Put(ctx, a0, a1))

	// Call the remote method.
	s.putMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}
	s.putMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

type chatGPT_client_stub struct {
	stub            codegen.Stub
	completeMetrics *codegen.MethodMetrics
}

// Check that chatGPT_client_stub implements the ChatGPT interface.
var _ ChatGPT = (*chatGPT_client_stub)(nil)

func (s chatGPT_client_stub) Complete(ctx context.Context, a0 string) (r0 string, err error) {
	// Update metrics.
	start := time.Now()
	s.completeMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "main.ChatGPT.Complete", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.completeMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.completeMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	var shardKey uint64

	// Call the remote method.
	s.completeMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}
	s.completeMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = dec.String()
	err = dec.Error()
	return
}

type factorer_client_stub struct {
	stub          codegen.Stub
	factorMetrics *codegen.MethodMetrics
}

// Check that factorer_client_stub implements the Factorer interface.
var _ Factorer = (*factorer_client_stub)(nil)

func (s factorer_client_stub) Factor(ctx context.Context, a0 int) (r0 []int, err error) {
	// Update metrics.
	start := time.Now()
	s.factorMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "main.Factorer.Factor", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.factorMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.factorMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += 8
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.Int(a0)
	var shardKey uint64

	// Call the remote method.
	s.factorMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}
	s.factorMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_int_7c8c8866(dec)
	err = dec.Error()
	return
}

type main_client_stub struct {
	stub codegen.Stub
}

// Check that main_client_stub implements the weaver.Main interface.
var _ weaver.Main = (*main_client_stub)(nil)

// Server stub implementations.

type cache_server_stub struct {
	impl    Cache
	addLoad func(key uint64, load float64)
}

// Check that cache_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*cache_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s cache_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "Get":
		return s.get
	case "Put":
		return s.put
	default:
		return nil
	}
}

func (s cache_server_stub) get(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int
	a0 = dec.Int()
	var r router
	s.addLoad(_hashCache(r.Get(ctx, a0)), 1.0)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.Get(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_int_7c8c8866(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s cache_server_stub) put(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int
	a0 = dec.Int()
	var a1 []int
	a1 = serviceweaver_dec_slice_int_7c8c8866(dec)
	var r router
	s.addLoad(_hashCache(r.Put(ctx, a0, a1)), 1.0)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.Put(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

type chatGPT_server_stub struct {
	impl    ChatGPT
	addLoad func(key uint64, load float64)
}

// Check that chatGPT_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*chatGPT_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s chatGPT_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "Complete":
		return s.complete
	default:
		return nil
	}
}

func (s chatGPT_server_stub) complete(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.Complete(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.String(r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

type factorer_server_stub struct {
	impl    Factorer
	addLoad func(key uint64, load float64)
}

// Check that factorer_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*factorer_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s factorer_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "Factor":
		return s.factor
	default:
		return nil
	}
}

func (s factorer_server_stub) factor(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 int
	a0 = dec.Int()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.Factor(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_int_7c8c8866(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

type main_server_stub struct {
	impl    weaver.Main
	addLoad func(key uint64, load float64)
}

// Check that main_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*main_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s main_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	default:
		return nil
	}
}

// Router methods.

// _hashCache returns a 64 bit hash of the provided value.
func _hashCache(r int) uint64 {
	var h codegen.Hasher
	h.WriteInt(int(r))
	return h.Sum64()
}

// _orderedCodeCache returns an order-preserving serialization of the provided value.
func _orderedCodeCache(r int) codegen.OrderedCode {
	var enc codegen.OrderedEncoder
	enc.WriteInt(int(r))
	return enc.Encode()
}

// Encoding/decoding implementations.

func serviceweaver_enc_slice_int_7c8c8866(enc *codegen.Encoder, arg []int) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		enc.Int(arg[i])
	}
}

func serviceweaver_dec_slice_int_7c8c8866(dec *codegen.Decoder) []int {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]int, n)
	for i := 0; i < n; i++ {
		res[i] = dec.Int()
	}
	return res
}
